name: Format, Test & Coverage

on:
  pull_request:
    branches: [main]
    paths: [run.py, db/**, app/**, tests/**]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5.0.0
      - uses: actions/setup-python@v6.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: make install

      - name: Check formatting with Ruff
        run: ruff format --check .
  test:
    runs-on: ubuntu-latest
    needs: format
    env:
      LOCAL_DB_HOST: ${{ secrets.LOCAL_DB_HOST }}
      LOCAL_DB_NAME: ${{ secrets.LOCAL_DB_NAME }}
      LOCAL_DB_USER: ${{ secrets.LOCAL_DB_USER }}
      LOCAL_DB_PASSWORD: ${{ secrets.LOCAL_DB_PASSWORD }}

    steps:
      - uses: actions/checkout@v5.0.0
      - uses: actions/setup-python@v6.0.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: make install

      - name: Run tests + coverage
        run: |
          echo "Running pytest with coverage..."
          make coverage | tee coverage_output.txt
          echo "Coverage command completed with exit code: $?"

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: coverage
          path: coverage_output.txt

  coverage-report:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v5.0.0

      - name: Download coverage
        uses: actions/download-artifact@v5.0.0
        with:
          name: coverage
          path: ./coverage

      - name: Post PR comments
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ github.token }}
          COVERAGE_THRESHOLD: 80
        run: |
          COVERAGE_FILE="./coverage/coverage_output.txt"
          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "No coverage file found at $COVERAGE_FILE"
            ls -la ./coverage/ || true
            exit 1
          fi

          COVERAGE_LINE=$(grep -E "TOTAL.*[0-9]+%" "$COVERAGE_FILE" || true)
          if [ -z "$COVERAGE_LINE" ]; then
            echo "No coverage data found in $COVERAGE_FILE."
            cat "$COVERAGE_FILE" || echo "Could not read coverage file"
            exit 1
          fi

          COVERAGE_PERCENTAGE=$(echo "$COVERAGE_LINE" | awk '{print substr($NF, 1, length($NF)-1)}')
          STATUS="ðŸ”´ Fail"
          if (( $(echo "$COVERAGE_PERCENTAGE >= $COVERAGE_THRESHOLD" | bc -l) )); then
            STATUS="ðŸŸ¢ Pass"
          fi
          
          # Build the comment body using a here-doc so markdown newlines are preserved
          COMMENT_BODY=$(cat <<EOF
          ### Code Coverage Summary

           | Metric | Value | Status |
           |---|---|---|
           | Overall Coverage | ${COVERAGE_PERCENTAGE}% | ${STATUS} |

           _Threshold: ${COVERAGE_THRESHOLD}%_
          EOF
          )

          # Post the comment using the multiline variable
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY" --edit-last --create-if-none

